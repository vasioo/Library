.menu {
    filter: url('#shadowed-goo');
    z-index: 1;
    cursor: pointer;
    height: 100vh;
    width:8vw;
    position:fixed;
}

.menu-item, .menu-open-button {
    background: #00d1d1;
    border-radius: 100%;
    width: 50px;
    height: 50px;
    position: absolute;
    top: 20px;
    color: white;
    text-align: center;
    line-height: 50px;
    transform: translate3d(0, 0, 0);
    transition: transform ease-out 200ms;
}

.menu-open {
    display: none;
    color: orange;
}

.hamburger {
    width: 25px;
    height: 3px;
    background: white;
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-left: -12.5px;
    margin-top: -1.5px;
    transition: transform 200ms;
}

.hamburger-1 {
    transform: translate3d(0, -8px, 0);
}

.hamburger-2 {
    transform: translate3d(0, 0, 0);
}

.hamburger-3 {
    transform: translate3d(0, 8px, 0);
}

.menu-open:checked + .menu-open-button .hamburger-1 {
    transform: translate3d(0, 0, 0) rotate(45deg);
    background: orange;
}

.menu-open:checked + .menu-open-button .hamburger-2 {
    transform: translate3d(0, 0, 0) scale(0.1, 1);
    background: orange;
}

.menu-open:checked + .menu-open-button .hamburger-3 {
    transform: translate3d(0, 0, 0) rotate(-45deg);
    background: orange;
}

main.menu-opened {
    filter:blur(1px);
}

.menu {
    position: absolute;
    left: 90%;
    box-sizing: border-box;
    font-size: 20px;
    text-align: left;
}

.menu-item:hover {
    background: white;
    color: #00d1d1;
}

.menu-item:nth-child(3) {
    transition-duration: 180ms;
}

.menu-item:nth-child(4) {
    transition-duration: 180ms;
}

.menu-item:nth-child(5) {
    transition-duration: 180ms;
}

.menu-item:nth-child(6) {
    transition-duration: 180ms;
}

.menu-item:nth-child(7) {
    transition-duration: 180ms;
}

.menu-item:nth-child(8) {
    transition-duration: 180ms;
}

.menu-item:nth-child(9) {
    transition-duration: 180ms;
}


.menu-open-button {
    z-index: 2;
    transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transition-duration: 400ms;
    transform: scale(1.1, 1.1) translate3d(0, 0, 0);
    cursor: pointer;
}

    .menu-open-button:hover {
        transform: scale(1.2, 1.2) translate3d(0, 0, 0);
    }

.menu-open:checked + .menu-open-button {
    transition-timing-function: linear;
    transition-duration: 200ms;
    transform: scale(0.8, 0.8) translate3d(0, 0, 0);
}

.menu-open:checked ~ .menu-item {
    transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
}

    .menu-open:checked ~ .menu-item:nth-child(3) {
        transition-duration: 150ms;
        transform: translate3d(0, 65px, 0);
    }

    .menu-open:checked ~ .menu-item:nth-child(4) {
        transition-duration: 200ms;
        transform: translate3d(0, 123px, 0);
    }

    .menu-open:checked ~ .menu-item:nth-child(5) {
        transition-duration: 250ms;
        transform: translate3d(0, 180px, 0);
    }

    .menu-open:checked ~ .menu-item:nth-child(6) {
        transition-duration: 300ms;
        transform: translate3d(0, 237px, 0);
    }

    .menu-open:checked ~ .menu-item:nth-child(7) {
        transition-duration: 350ms;
        transform: translate3d(0, 294px, 0);
    }

    .menu-open:checked ~ .menu-item:nth-child(8) {
        transition-duration: 400ms;
        transform: translate3d(0, 351px, 0);
    }
    .menu-open:checked ~ .menu-item:nth-child(9) {
        transition-duration: 450ms;
        transform: translate3d(0, 351px, 0);
    }
@property --progress-value {
    syntax: '<integer>';
    inherits: true;
    initial-value: 0;
}

:root {
    --progress-bar-color: #cfd8dc;
    --progress-value-color: #2196f3;
    --progress-empty-color-h: 4.1;
    --progress-empty-color-s: 89.6;
    --progress-empty-color-l: 58.4;
    --progress-filled-color-h: 122.4;
    --progress-filled-color-s: 39.4;
    --progress-filled-color-l: 49.2;
}

progress[value] {
    display: block;
    position: relative;
    appearance: none;
    width: 100%;
    height: 6px;
    border: 0;
    --border-radius: 10px;
    border-radius: var(--border-radius);
    counter-reset: progress var(--progress-value);
    --progress-value-string: counter(progress) 'т.';
    --progress-max-decimal: calc(var(--value, 0) / var(--max, 0));
    --progress-value-decimal: calc(var(--progress-value, 0) / var(--max, 0));

    @supports selector(::-moz-progress-bar) {
        --progress-value-decimal: calc(var(--value, 0) / var(--max, 0));
    }

    --progress-value-percent: calc(var(--progress-value-decimal) * 100%);
    --progress-value-color: hsl( calc((var(--progress-empty-color-h) + (var(--progress-filled-color-h) - var(--progress-empty-color-h)) * var(--progress-value-decimal)) * 1deg) calc((var(--progress-empty-color-s) + (var(--progress-filled-color-s) - var(--progress-empty-color-s)) * var(--progress-value-decimal)) * 1%) calc((var(--progress-empty-color-l) + (var(--progress-filled-color-l) - var(--progress-empty-color-l)) * var(--progress-value-decimal)) * 1%) );
    animation: calc(3s * var(--progress-max-decimal)) linear 0.5s 1 normal both progress;
}

    progress[value]::-webkit-progress-bar {
        background-color: var(--progress-bar-color);
        border-radius: var(--border-radius);
        overflow: hidden;
    }

    progress[value]::-webkit-progress-value {
        width: var(--progress-value-percent) !important;
        background-color: var(--progress-value-color);
        border-radius: var(--border-radius);
    }

    progress[value]::-moz-progress-bar {
        width: var(--progress-value-percent) !important;
        background-color: var(--progress-value-color);
        border-radius: var(--border-radius);
    }

    progress[value]::after {
        display: flex;
        align-items: center;
        justify-content: center;
        --size: 51px;
        width: var(--size);
        height: var(--size);
        position: absolute;
        left: var(--progress-value-percent);
        top: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--progress-value-color);
        border-radius: 50%;
        content: attr(value);
        content: var(--progress-value-string, var(--value));
        font-size: 1em;
        font-weight: 700;
        color: #fff;
    }

@keyframes progress {
    from {
        --progress-value: 0;
    }

    to {
        --progress-value: var(--value);
    }
}